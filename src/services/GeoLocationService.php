<?php

namespace studioespresso\easyaddressfield\services;

use Craft;
use craft\base\Component;
use craft\helpers\Json;
use GuzzleHttp\Client;
use maxh\Nominatim\Nominatim;
use studioespresso\easyaddressfield\EasyAddressField;
use studioespresso\easyaddressfield\models\EasyAddressFieldModel;
use yii\base\InvalidConfigException;

class GeoLocationService extends Component
{
    public $settings;

    public function init(): void
    {
        $this->settings = EasyAddressField::getInstance()->getSettings();
        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param EasyAddressFieldModel $model
     *
     * @return EasyAddressFieldModel
     */
    public function locate(EasyAddressFieldModel $model)
    {
        try {
            if (!$model->latitude && !$model->longitude and strlen($model->toString()) >= 2) {
                if ($this->settings->geoCodingService === 'google') {
                    $model = $this->geocodeGoogle($model);
                } else {
                    $model = $this->geocodeOSM($model);
                }
            }
            return $model;
        } catch (\Throwable $exception) {
            \Craft::error($exception->getMessage(), 'easy-address-field');
            return $model;
        }
    }

    private function geocodeGoogle(EasyAddressFieldModel $model)
    {
        if (!$this->settings->googleApiKey) {
            return $model;
        }

        if (!$model->latitude && !$model->longitude and strlen($model->toString()) >= 2) {
            $client = new Client(['base_uri' => 'https://maps.googleapis.com']);
            $request = $client->request('GET',
                'maps/api/geocode/json?address=' . urlencode($model->toString()) . '&key=' . Craft::parseEnv($this->settings->googleApiKey) . '',
                ['allow_redirects' => false]
            );
            $json = Json::decodeIfJson($request->getBody()->getContents());

            if ($json['status'] !== 'OK' && $json['error_message']) {
                if (Craft::$app->getConfig()->general->devMode) {
                    throw new InvalidConfigException('Google API error: ' . $json['error_message']);
                }
                Craft::error($json['error_message'], 'easy-address-field');
            }

            if ($json['status'] === 'OK') {
                if ($json['results'][0]['geometry']['location']) {
                    $model->latitude = $json['results'][0]['geometry']['location']['lat'];
                    $model->longitude = $json['results'][0]['geometry']['location']['lng'];
                }
            }
        }

        return $model;
    }

    private function geocodeOSM(EasyAddressFieldModel $model)
    {
        // url encode the address
        $url = "http://nominatim.openstreetmap.org/";
        $nominatim = new Nominatim($url);
        $search = $nominatim->newSearch()
            ->countryCode($model->country)
            ->state($model->state ?? '')
            ->city($model->city ?? '')
            ->postalCode($model->postalCode ?? '')
            ->street($model->street . ' ' . $model->street2)
            ->limit(1)
            ->polygon('geojson')
            ->addressDetails();

        $result = $nominatim->find($search);
        if (empty($result)) {
            return $model;
        }

        if (isset($result[0]['lat']) && isset($result[0]['lon'])) {
            $model->longitude = $result[0]['lon'];
            $model->latitude = $result[0]['lat'];
        } elseif (is_array($result[0]['geojson']['coordinates'][0]) && is_array($result[0]['geojson']['coordinates'][0][0])) {
            $model->longitude = $result[0]['geojson']['coordinates'][0][0][0];
            $model->latitude = $result[0]['geojson']['coordinates'][0][0][1];
        } elseif (is_array($result[0]['geojson']['coordinates'][0])) {
            $model->longitude = $result[0]['geojson']['coordinates'][0][0];
            $model->latitude = $result[0]['geojson']['coordinates'][0][1];
        } else {
            $model->longitude = $result[0]['geojson']['coordinates'][0];
            $model->latitude = $result[0]['geojson']['coordinates'][1];
        }
        return $model;
    }
}
