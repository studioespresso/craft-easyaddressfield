<?php

namespace studioespresso\easyaddressfield\services;

use craft\base\Component;
use craft\base\Event;
use craft\elements\Address;
use maxh\Nominatim\Nominatim;
use studioespresso\easyaddressfield\EasyAddressField;
use studioespresso\easyaddressfield\events\RegisterGeocoderEvent;
use studioespresso\easyaddressfield\models\EasyAddressFieldModel;
use studioespresso\easyaddressfield\services\geocoders\GoogleGeoCoder;

class GeoLocationService extends Component
{
    public $settings;

    public const EVENT_REGISTER_GEOCODERS = 'registerGeoCodersEvent';
    public $geoCoders = [];

    public function init(): void
    {
        $this->settings = EasyAddressField::getInstance()->getSettings();

        $event = new RegisterGeocoderEvent();
        Event::trigger(self::class, self::EVENT_REGISTER_GEOCODERS, $event);

        $this->geoCoders = collect(array_merge($this->geoCoders, $event->geoCoders))->map(function ($geoCoder) {
            return \Craft::createObject($geoCoder);
        });

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @param EasyAddressFieldModel $model
     *
     * @return EasyAddressFieldModel
     */
    public function locate(EasyAddressFieldModel $model)
    {
        try {
            if (!$model->latitude && !$model->longitude and strlen($model->toString()) >= 2) {
                if ($this->settings->geoCodingService === 'google') {
                    $model = $this->geocodeModelGoogle($model);
                } else {
                    $model = $this->geocodeModelOSM($model);
                }
            }
            return $model;
        } catch (\Throwable $exception) {
            \Craft::error($exception->getMessage(), 'easy-address-field');
            return $model;
        }
    }

    public function locateElement(Address $element)
    {
        try {
            if (!$element->latitude && !$element->longitude && $element->countryCode) {
                if ($this->settings->geoCodingService === 'google') {
                    $coordinates = $this->geocodeElementGoogle($element);
                    return $coordinates;
                } else {
                    $coordinates = $this->geocodeElementOSM();
                }
                return [];
            }
        } catch (\Throwable $exception) {
            \Craft::error($exception->getMessage(), 'easy-address-field');
            return $element;
        }
    }


    private function geocodeElementOSM(Address $address): array
    {
        // url encode the address
        $url = "http://nominatim.openstreetmap.org/";
        $nominatim = new Nominatim($url);
        $search = $nominatim->newSearch()
            ->countryCode($address->countryCode)
            ->state($address->administrativeArea ?? '')
            ->city($address->locality ?? '')
            ->postalCode($address->postalCode ?? '')
            ->street($address->addressLine1 . ' ' . $address->addressLine2 . ' ' . $address->addressLine3)
            ->limit(1)
            ->polygon('geojson')
            ->addressDetails();

        $result = $nominatim->find($search);
        if (empty($result)) {
            return [];
        }

        if (isset($result[0]['lat']) && isset($result[0]['lon'])) {
            return [
                'latitude' => $result[0]['lat'],
                'longitude' => $result[0]['lon'],
            ];

        }

        if (is_array($result[0]['geojson']['coordinates'][0]) && is_array($result[0]['geojson']['coordinates'][0][0])) {
            return [
                'latitude' => $result[0]['geojson']['coordinates'][0][0][1],
                'longitude' => $result[0]['geojson']['coordinates'][0][0][0],
            ];

        }

        if (is_array($result[0]['geojson']['coordinates'][0])) {
            return [
                'latitude' => $result[0]['geojson']['coordinates'][0][1],
                'longitude' => $result[0]['geojson']['coordinates'][0][0],
            ];
        }

        return [
            'latitude' => $result[0]['geojson']['coordinates'][1],
            'longitude' => $result[0]['geojson']['coordinates'][0],
        ];

    }

    private function geocodeModelOSM(EasyAddressFieldModel $model)
    {
        // url encode the address
        $url = "http://nominatim.openstreetmap.org/";
        $nominatim = new Nominatim($url);
        $search = $nominatim->newSearch()
            ->countryCode($model->country)
            ->state($model->state ?? '')
            ->city($model->city ?? '')
            ->postalCode($model->postalCode ?? '')
            ->street($model->street . ' ' . $model->street2)
            ->limit(1)
            ->polygon('geojson')
            ->addressDetails();

        $result = $nominatim->find($search);
        if (empty($result)) {
            return $model;
        }

        if (isset($result[0]['lat']) && isset($result[0]['lon'])) {
            $model->longitude = $result[0]['lon'];
            $model->latitude = $result[0]['lat'];
        } elseif (is_array($result[0]['geojson']['coordinates'][0]) && is_array($result[0]['geojson']['coordinates'][0][0])) {
            $model->longitude = $result[0]['geojson']['coordinates'][0][0][0];
            $model->latitude = $result[0]['geojson']['coordinates'][0][0][1];
        } elseif (is_array($result[0]['geojson']['coordinates'][0])) {
            $model->longitude = $result[0]['geojson']['coordinates'][0][0];
            $model->latitude = $result[0]['geojson']['coordinates'][0][1];
        } else {
            $model->longitude = $result[0]['geojson']['coordinates'][0];
            $model->latitude = $result[0]['geojson']['coordinates'][1];
        }
        return $model;
    }
}
